name: test android emulator

on:
  workflow_dispatch:
  push:
    branches:
      - test_workflow_for_patrol_tests

env:
  ANDROID_IMAGE: system-images;android-30;aosp_atd;x86
  FLUTTER_APP_ROOT: ${{ github.workspace }}/packages/patrol/example
  PATROL_CLI_VERSION: 1.1.7

jobs:
  main:
    name: Test on Android Emulator
    runs-on: macos-latest
    timeout-minutes: 60

    defaults:
      run:
        working-directory: ${{ env.FLUTTER_APP_ROOT }}

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Set up Java
        run: echo "JAVA_HOME="$JAVA_HOME_11_X64"" >> $GITHUB_ENV

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Preload Flutter artifacts
        run: flutter precache

      - name: Install patrol_cli
        run: |
          dart pub global activate \
            --source git https://github.com/leancodepl/patrol.git \
            --git-path packages/patrol_cli \
            --git-ref patrol_cli-v$PATROL_CLI_VERSION

      - name: Download TestButler
        run: curl -f -o ~/test-butler-2.2.1.apk https://repo1.maven.org/maven2/com/linkedin/testbutler/test-butler-app/2.2.1/test-butler-app-2.2.1.apk

      - name: Install ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2
        id: setup-ffmpeg

      - name: Install sponge
        run: brew install sponge

      - name: Generate gradlew
        run: |
          flutter build apk --target lib/main.dart --debug --flavor=does-not-exist &
          buildpid="$!"
          while [ ! -e "android/gradlew" ]; do
              echo "waiting for gradlew to generate..."
              sleep 2
          done
          kill $buildpid

      - name: Add Android tools to path
        run: |
          echo "/Users/runner/Library/Android/sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "/Users/runner/Library/Android/sdk/emulator" >> $GITHUB_PATH
          echo "/Users/runner/Library/Android/sdk/platform-tools" >> $GITHUB_PATH
          flutter config --android-sdk "/Users/runner/Library/Android/sdk"

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
            ~/Library/Android/sdk/*
          key: avd-${{ env.ANDROID_IMAGE }}
          
      - name: Create emulator for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        run: |
          echo "Downloading Android image..."
          yes | sdkmanager --licenses > /dev/null
          sdkmanager "$ANDROID_IMAGE" > /dev/null
          echo "Done"

          echo "Creating emulator..."
          avdmanager -s create avd -n MyAVD -k "$ANDROID_IMAGE"
          echo "Done"

          echo "Configuring emulator..."
          echo "hw.cpu.ncore=3" >> ~/.android/avd/MyAVD.avd/config.ini
          echo "hw.gpu.enabled=yes" >> ~/.android/avd/MyAVD.avd/config.ini
          echo "hw.gpu.mode=swiftshader_indirect" >> ~/.android/avd/MyAVD.avd/config.ini
          echo "hw.ramSize=4096" >> ~/.android/avd/MyAVD.avd/config.ini
          echo "disk.dataPartition.size=6G" >> ~/.android/avd/MyAVD.avd/config.ini
          echo "hw.camera.back=virtualscene" >> ~/.android/avd/MyAVD.avd/config.ini
          echo "vm.heapSize=576" >> ~/.android/avd/MyAVD.avd/config.ini
          echo "hw.lcd.density=440" >> ~/.android/avd/MyAVD.avd/config.ini
          echo "hw.lcd.height=2220" >> ~/.android/avd/MyAVD.avd/config.ini
          echo "hw.lcd.width=1080" >> ~/.android/avd/MyAVD.avd/config.ini
          echo "Done"

          echo "Booting up and shutting down emulator..."
          emulator @MyAVD -no-window -noaudio -no-boot-anim -no-snapshot-load &
          bash ${{ github.workspace }}/.github/scripts/boot_completed_check.sh
          # adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done; input keyevent 82'
          adb -s emulator-5554 emu kill
          echo "Done"
          sleep 10

      - name: Run emulator and tests
        run: ${{ github.workspace }}/.github/scripts/run-emulator-and-tests.sh

      - name: Upload flutter logs to artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: flutter-logs
          path: ${{ env.FLUTTER_APP_ROOT }}/flutter-logs

      - name: Upload tests summary to artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: tests-summary
          path: ${{ env.FLUTTER_APP_ROOT }}/tests-summary

      - name: Upload screenrecordings to artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: screenrecord.mp4
          path: ${{ env.FLUTTER_APP_ROOT }}/screenrecords/screenrecord.mp4
