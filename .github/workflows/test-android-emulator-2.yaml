name: test gradle managed devices

on:
  workflow_dispatch:

jobs:
  main:
    name: Test on Gradle Managed Devices
    runs-on: macos-latest
    timeout-minutes: 60

    defaults:
      run:
        working-directory: packages/patrol/example

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Preload Flutter artifacts
        run: flutter precache

      - name: Set up Patrol CLI
        working-directory: packages/patrol_cli
        run: dart pub global activate --source path . && patrol

      - name: Generate gradlew
        run: |
          flutter build apk --debug --flavor=does-not-exist &
          buildpid="$!"
          while [ ! -e "android/gradlew" ]; do
              echo "waiting for gradlew to generate..."
              sleep 2
          done
          kill $buildpid

      - name: Install cmdline-tools
        if: false
        run: |
          cd
          curl -LO https://dl.google.com/android/repository/commandlinetools-mac-9477386_latest.zip
          brew install unzip 1>/dev/null 2>&1
          unzip commandlinetools-mac-9477386_latest.zip

          mkdir ~/android-sdk
          mkdir ~/android-sdk/cmdline-tools
          mkdir ~/android-sdk/platforms # we just need empty folder
          mkdir ~/android-sdk/cmdline-tools/latest
          mv -v ~/cmdline-tools/* ~/android-sdk/cmdline-tools/latest

          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH

      - name: Install SDKs with sdkmanager
        run: yes | /Users/runner/Library/Android/sdk/cmdline-tools/**/bin/sdkmanager --licenses

      - name: Build tests
        run: |
          patrol build android \
            --exclude integration_test/example_test.dart \
            --exclude integration_test/open_app_test.dart \
            --exclude integration_test/permissions_location_test.dart \
            --exclude integration_test/webview_hackernews_test.dart \
            --exclude integration_test/webview_stackoverflow_test.dart \
            --exclude integration_test/webview_leancode_test.dart \
            --exclude integration_test/service_bluetooth_test.dart \
            --exclude integration_test/service_airplane_mode_test.dart
      
      - name: Run emulator and tests
        working-directory: packages/patrol/example/android
        run: ./gradlew app:pixel2api33DebugAndroidTest -Ptarget=${{ github.workspace }}/packages/patrol/example/integration_test/test_bundle.dart -Pandroid.testoptions.manageddevices.emulator.gpu=swiftshader_indirect

      - name: Merge XML reports
        if: always()
        working-directory: build/app/outputs/androidTest-results/managedDevice/pixel2api33
        run: |
          npm install -g junit-report-merger
          jrm ./pixel2api33.xml "./*.xml"
      
      - name: Publish test report to summary
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          check_name: Patrol tests
          report_paths: ${{ github.workspace }}/packages/patrol/example/build/app/outputs/androidTest-results/managedDevice/*.xml
          detailed_summary: true
          include_passed: true

      - name: Generate test report as check run
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Patrol Tests
          path: ${{ github.workspace }}/packages/patrol/example/build/app/outputs/androidTest-results/managedDevice/*.xml
          reporter: java-junit
          fail-on-error: false

      - name: Upload XML test report to artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: XML test report
          path: ${{ github.workspace }}/packages/patrol/example/test_artifacts/results.xml
